<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>面试总结</title>
    <url>/2019/12/10/interview/</url>
    <content><![CDATA[<h2 id="js常见问题"><a href="#js常见问题" class="headerlink" title="js常见问题"></a>js常见问题</h2><p>1.说几种常见的console方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">console.log()</span><br><span class="line">console.table()</span><br><span class="line">console.time()</span><br></pre></td></tr></table></figure>
<p>2.深拷贝和浅拷贝的理解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">区别：</span><br><span class="line">    浅拷贝只是将原对象的引用复制给了新的对象，与原对象公用一个内存空间，会随原对象变动</span><br><span class="line">    深拷贝是将原对象的引用复制给新对象并重新分配内存空间，独立于原对象</span><br><span class="line">浅拷贝：</span><br><span class="line">    对象A=对象B</span><br><span class="line">    Object.assign(&#123;name:<span class="string">'ayuan'</span>,&#123;name:<span class="string">'lele'</span>,age:3&#125;&#125;) =&gt; 输出结果 &#123;name:<span class="string">'lele'</span>,age:3&#125;</span><br><span class="line">深拷贝：</span><br><span class="line">    JSON.stringify(JSON.parase(json))  =&gt; 简单粗暴</span><br><span class="line">    js封装方法：</span><br><span class="line">        <span class="keyword">function</span> deepCopy（p,c）&#123;</span><br><span class="line">            c = c || [];</span><br><span class="line">            <span class="keyword">for</span>(const i <span class="keyword">in</span> p) &#123;</span><br><span class="line">                <span class="keyword">if</span> (typeof p[i] === <span class="string">'object'</span>) &#123;</span><br><span class="line">                    c[i] = Object.prototype.toSting.call(p[i]) === ‘[object Array]’ ? [] : &#123;&#125;</span><br><span class="line">                    deepCopy(p[i],c[i])</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    c[i] = p[i]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">return</span> c</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>3.web离线存储介绍</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">离线存储：cookie，localStorage,sessionStorage</span><br><span class="line">区别：</span><br><span class="line">    -   存储大小：cookie不能超过4k，localStorage和sessionStorage是5M</span><br><span class="line">    -   有效时间：cookie设置了有效时间后在有效时间内一直有效，即使关闭浏览器或关闭窗口也不会被删除；localStorage存储持久数据，浏览器关闭数据不丢失除非主动删除；sessionStorage数据不持久，关闭浏览器数据自动删除</span><br><span class="line">    -   与服务器之间的关系：cookie会将数据传递到服务端，服</span><br></pre></td></tr></table></figure>
<p>4.数组常用的操作方法</p>
<p><img src="/2019/12/10/interview/ArrImg.png" alt="ArrImg"></p>
<p>5.原型，原型链</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">prototype（原型），每个对象都会在自己的内部初始化一个原型。</span><br><span class="line">当我们访问一个对象的某个属性时，对象的内部没有这个属性就会去prototype中寻找，没有找到会继续找自己上一级的prototype。这个查找的过程叫做原型链。</span><br><span class="line">如果查不到返回undefined。</span><br></pre></td></tr></table></figure>
<p>6.call()，apply(),bind()的区别</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">首先这三个都是用来改变this指向的。</span><br><span class="line">区别：call()和apply()第一个参数都是指定的对象，call之后的参数都是传入该函数的值，apply第二个参数是数组，数组中是函数执行需要的参数。</span><br><span class="line"><span class="built_in">bind</span>()的参数和call相同，不同的是<span class="built_in">bind</span>改变this的指向后不会立即执行函数，其他两个是改变后立即执行的</span><br><span class="line">tips：</span><br><span class="line">    使用<span class="built_in">bind</span>()的时候最好不要直接绑定在dome上，以react为例最好在constructor中使用。避免当dome变化时需重新绑定，写法如下:</span><br></pre></td></tr></table></figure>

<p><img src="/2019/12/10/interview/bind()%E4%BC%98%E5%8C%96.png" alt="bind()优化"></p>
<p>7.const定义的变量可以改变吗</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">const定义的变量是个常量不可修改，但是如果const定义了一个对象，可以改变对象里的属性</span><br></pre></td></tr></table></figure>

<p>8.对Object.assign()的理解</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Object.assign()合并对象，第一个参数是目标对象，剩余是源对象。</span><br><span class="line">如果多个源对象有相同属性，后边的源对象会覆盖前边的属性</span><br></pre></td></tr></table></figure>


<h2 id="vue相关问题"><a href="#vue相关问题" class="headerlink" title="vue相关问题"></a>vue相关问题</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/2019/11/14/myBlog/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><blockquote>
<p>1.安装git，如何安装请参考<a href="https://git-scm.com/" target="_blank" rel="noopener">git官网</a><br>2.安装node，如何安装请参考<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">node官网</a><br>3.准备gitHub账号，请前往<a href="https://github.com/" target="_blank" rel="noopener">gitHub官网</a>设置账号</p>
</blockquote>
<h2 id="参考记录"><a href="#参考记录" class="headerlink" title="参考记录"></a>参考记录</h2><blockquote>
<p>1.<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT官网</a><br>2.<a href="http://xyua.top/" target="_blank" rel="noopener">雜言非語</a><br>3.<a href="https://www.qcmoke.site/blog/hexo_next.html" target="_blank" rel="noopener">Qcmoke’s Blog</a></p>
</blockquote>
<h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法1 使用git执行以下命令(方便更新):</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br><span class="line"><span class="comment"># 方法2 直接下载稳定版本</span></span><br><span class="line">选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。</span><br><span class="line">解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-0.4.0）更改为 hexo-theme-next</span><br></pre></td></tr></table></figure>
<h3 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h3><blockquote>
<p>1.在 myblog/_config.yml中搜索关键字：theme<br>2.将 theme: landscape 修改为 theme: hexo-theme-next</p>
</blockquote>
<p><img src="/2019/11/14/myBlog/editTheme.png" alt="editTheme"></p>
<h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><h4 id="语言配置"><a href="#语言配置" class="headerlink" title="语言配置"></a>语言配置</h4><blockquote>
<p>1.在 myblog/_config.yml中搜索关键字：language<br>2.将 language:  修改为 language: zh-Hans</p>
</blockquote>
<p><img src="/2019/11/14/myBlog/editLanguage.png" alt="editLanguage"></p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的git命令</title>
    <url>/2019/06/28/gitUse/</url>
    <content><![CDATA[<blockquote>
<p>克隆代码：</p>
<pre><code>git clone [url]</code></pre><p>查看本地更新状态:</p>
<pre><code>git status</code></pre><p>添加文件:</p>
<pre><code>git add [name] // 添加某个文件
git add .      // 添加所有文件</code></pre><p>添加commit信息:</p>
<pre><code>git commit -m &quot;更新的内容&quot;
git commit -v  // 查看记录</code></pre><p>更新代码：</p>
<pre><code>git pull origin master // 从master分支上更新代码</code></pre><p>推送至远程仓库:</p>
<pre><code>git push origin master </code></pre></blockquote>
<h1 id="git操作远程仓库分支"><a href="#git操作远程仓库分支" class="headerlink" title="git操作远程仓库分支"></a>git操作远程仓库分支</h1><blockquote>
<p>查看远程仓库和本地仓库分支：</p>
<pre><code>git branch -a     // 查看所有分支
git branch        // 查看本地分支
git branch -r     // 查看远程分支
git branch [name] // 创建本地分支</code></pre><p>切换分支:</p>
<pre><code>git checkout dev     // 切换至dev分支
git checkout -b dev  // 如果有dev分支切换至dev分支，如果没有则创建并切换至dev分支</code></pre><p>删除分支:</p>
<pre><code>git branch -d dev            // 删除本地dev分支，如果有未提交的代码则删除失败
git branch -D dev            // 强制删除本地dev分支
git branch -r -d origin/dev  // 删除远程分支dev</code></pre><p>合并分支:</p>
<pre><code>git checkout master // 第一步先切回主分支
git merge dev       // 第二步合并dev分支至master，如果有冲突需要先解决冲突</code></pre></blockquote>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>前端环境配置</title>
    <url>/2019/06/25/index/</url>
    <content><![CDATA[<h2 id="配置淘宝镜像"><a href="#配置淘宝镜像" class="headerlink" title="配置淘宝镜像"></a>配置淘宝镜像</h2><p>1.安装nrm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm i -g nrm       // 全局安装nrm</span><br><span class="line">nrm ls                  // 查看可用的镜像</span><br><span class="line">nrm use taobao          // 使用淘宝镜像</span><br><span class="line">npm config get registry // 查看配置是否成功</span><br></pre></td></tr></table></figure>
<p>2.如果第一步不成功先安装cnpm，使用cnpm安装nrm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<h2 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h2><p>1.查看是否存在ssh(如果有信息返回则不需要步骤2)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls || ll</span><br></pre></td></tr></table></figure>
<p>2.生成ssh(如果上一步返回信息可忽略此步骤)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"name@XXX.com"</span></span><br></pre></td></tr></table></figure>
<p>3.拷贝ssh</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pubssh-keygen -t rsa -C <span class="string">"name@XXX.com"</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
